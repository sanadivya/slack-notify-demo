substitutions:
  _ENV: dev
  _PROJECT_ID: epic-dev-55ae9
  _SERVICE_NAME: epic-dev-be
  _REGION: europe-west1
  _REPO: epic-dev-be
  _SERVICE_ACCOUNT: 715553450089-compute@developer.gserviceaccount.com

options:
  logging: CLOUD_LOGGING_ONLY

availableSecrets:
  secretManager:
    - versionName: projects/articulate-area-464808-q4/secrets/SLACK_WEBHOOK_URL/versions/latest
      env: SLACK_WEBHOOK_URL
    - versionName: projects/articulate-area-464808-q4/secrets/SLACK_GITHUB_TOKEN/versions/latest
      env: SLACK_GITHUB_TOKEN
    - versionName: projects/articulate-area-464808-q4/secrets/SLACK_WEBHOOK_URL_FAILURE/versions/latest
      env: SLACK_WEBHOOK_URL_FAILURE

steps:
  - id: "Build"
    name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'asia-south1-docker.pkg.dev/articulate-area-464808-q4/slack-notify/sample-app', '.']

  - id: "Push"
    name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'asia-south1-docker.pkg.dev/articulate-area-464808-q4/slack-notify/sample-app']

  - name: "ubuntu"
    id: Notify
    entrypoint: "bash"
    waitFor: ["Build", "Push"]
    secretEnv:
      ["SLACK_GITHUB_TOKEN", "SLACK_WEBHOOK_URL", "SLACK_WEBHOOK_URL_FAILURE"]
    args:
      - '-c'
      - |
        set -x

        echo "üîç Setting up...
        echo "üì¶ Installing curl jq..."
        apt-get update && apt-get install -y curl jq git

        COMMIT_SHA=$(git rev-parse HEAD)

        AFTER_SHA=$(git rev-parse HEAD)
        BEFORE_SHA=$(git rev-parse HEAD^)
        
        echo "$$AFTER_SHA"
        echo "$$BEFORE_SHA"

        echo "Fetching commit info..."
        COMMIT_API="https://api.github.com/repos/sanadivya/slack-notify-demo/commits/$$COMMIT_SHA"
        COMMIT_DATA=$(curl -s -H "Authorization: token $$SLACK_GITHUB_TOKEN" "$$COMMIT_API")
        COMMIT_MESSAGE=$(echo "$$COMMIT_DATA" | jq -r '.commit.message')
        COMMIT_AUTHOR=$(echo "$$COMMIT_DATA" | jq -r '.commit.author.name')

        echo "üì£ Sending slack notification..."

        echo "üîç Detecting merged PR for commit: $$COMMIT_SHA"

        PR_DATA=$(curl -s -H "Authorization: token $${GITHUB_TOKEN}" \
          "https://api.github.com/search/issues?q=$${COMMIT_SHA}+repo:sanadivya/slack-notify-demo+type:pr")

        PR_TOTAL_COUNT=$(echo "$$PR_DATA" | jq -r '.total_count')

        if [ "$$PR_TOTAL_COUNT" -gt 0 ]; then
          PR_NUMBER=$(echo "$$PR_DATA" | jq -r '.items[0].number')
          PR_TITLE=$(echo "$$PR_DATA" | jq -r '.items[0].title')
          PR_BODY=$(echo "$$PR_DATA" | jq -r '.items[0].body')
          PR_AUTHOR_LOGIN=$(echo "$$PR_DATA" | jq -r '.items[0].user.login')

          # Get author's full name if possible
          PR_AUTHOR_NAME=$(curl -s -H "Authorization: token $${GITHUB_TOKEN}" \
            "https://api.github.com/users/$${PR_AUTHOR_LOGIN}" | jq -r '.name')

          if [ "$$PR_AUTHOR_NAME" = "null" ] || [ -z "$$PR_AUTHOR_NAME" ]; then
            PR_AUTHOR_NAME="@$${PR_AUTHOR_LOGIN}"
          fi

          MESSAGE="‚úÖ *Build succeeded for PR #$${PR_NUMBER}* in \n*Title:* ${PR_TITLE}\n*Author:* ${PR_AUTHOR_NAME}\n*Description:*\n${PR_BODY}"
        else
          MESSAGE="‚úÖ *Build succeeded for commit:* \`${COMMIT_SHA}\` in \`${REPO_NAME}\`"
        fi

        curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\": \"$$MESSAGE\"}" \
          "$$SLACK_WEBHOOK_URL"
