substitutions:
  _ENV: dev
  _PROJECT_ID: epic-dev-55ae9
  _SERVICE_NAME: epic-dev-be
  _REGION: europe-west1
  _REPO: epic-dev-be
  _SERVICE_ACCOUNT: 715553450089-compute@developer.gserviceaccount.com

options:
  logging: CLOUD_LOGGING_ONLY

availableSecrets:
  secretManager:
    - versionName: projects/articulate-area-464808-q4/secrets/SLACK_WEBHOOK_URL/versions/latest
      env: SLACK_WEBHOOK_URL
    - versionName: projects/articulate-area-464808-q4/secrets/SLACK_GITHUB_TOKEN/versions/latest
      env: SLACK_GITHUB_TOKEN
    - versionName: projects/articulate-area-464808-q4/secrets/SLACK_WEBHOOK_URL_FAILURE/versions/latest
      env: SLACK_WEBHOOK_URL_FAILURE

steps:
  - id: "Build"
    name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'asia-south1-docker.pkg.dev/articulate-area-464808-q4/slack-notify/sample-app', '.']

  - id: "Push"
    name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'asia-south1-docker.pkg.dev/articulate-area-464808-q4/slack-notify/sample-app']

  - name: "ubuntu"
    id: Notify
    entrypoint: "bash"
    waitFor: ["Build", "Push"]
    secretEnv:
      ["SLACK_GITHUB_TOKEN", "SLACK_WEBHOOK_URL", "SLACK_WEBHOOK_URL_FAILURE"]
    args:
      - '-c'
      - |
        echo "üîç Setting up..."
        echo "üì¶ Installing curl jq..."
        apt-get update && apt-get install -y curl jq git

        COMMIT_SHA=$(git rev-parse HEAD)

        echo "Fetching commit info..."
        COMMIT_API="https://api.github.com/repos/sanadivya/slack-notify-demo/commits/$$COMMIT_SHA"
        COMMIT_DATA=$(curl -s -H "Authorization: token $$SLACK_GITHUB_TOKEN" "$$COMMIT_API")
        COMMIT_MESSAGE=$(echo "$$COMMIT_DATA" | jq -r '.commit.message')
        COMMIT_AUTHOR=$(echo "$$COMMIT_DATA" | jq -r '.commit.author.name')

        echo "üì£ Sending slack notification..."
        echo "üîç Detecting merged PR for commit: $$COMMIT_SHA"

        PR_DATA=$(curl -s -H "Authorization: token $$SLACK_GITHUB_TOKEN" \
            "https://api.github.com/search/issues?q=sha:$$COMMIT_SHA+repo:sanadivya/slack-notify-demo+is:pr")

        PR_COUNT=$(echo "$$PR_DATA" | jq 'length')

        if [ "$$PR_COUNT" -gt 0 ]; then

          PR_URL=$(echo "$$PR_DATA" | jq -r '.items[0].pull_request.url')
          if [ "$$PR_URL" == "null" ] || [ -z "$$PR_URL" ]; then
            echo "‚ùå No PR found for commit: $$COMMIT_SHA"
          exit 1
          fi
          LATEST_PR_DATA=$(curl -s -H "Authorization: token $$SLACK_GITHUB_TOKEN" "$$PR_URL")

          PR_NUMBER=$(echo "$$LATEST_PR_DATA" | jq -r '.number')
          PR_TITLE=$(echo "$$LATEST_PR_DATA" | jq -r '.title')
          PR_SOURCE=$(echo "$$LATEST_PR_DATA" | jq -r '.head.ref')
          PR_TARGET=$(echo "$$LATEST_PR_DATA" | jq -r '.base.ref')
          PR_DESCRIPTION=$(echo "$$LATEST_PR_DATA" | jq -r '.body')
          PR_AUTHOR_LOGIN=$(echo "$$LATEST_PR_DATA" | jq -r '.user.login')

          PR_AUTHOR_NAME=$(curl -s -H "Authorization: token $$SLACK_GITHUB_TOKEN" \
            "https://api.github.com/users/$${PR_AUTHOR_LOGIN}" | jq -r '.name')

          if [ "$$PR_AUTHOR_NAME" = "null" ] || [ -z "$$PR_AUTHOR_NAME" ]; then
            PR_AUTHOR_NAME="@$${PR_AUTHOR_LOGIN}"
          fi

          PR_DESCRIPTION_FORMATTED=$(echo "$${PR_DESCRIPTION}" | sed 's/^/  /' | sed ':a;N;$!ba;s/\n/\\n/g')

          DETAILS="\n- **PR Title**: $${PR_TITLE}\\n- **PR Number**: #$${PR_NUMBER}\\n- **PR Description**: \\n$${PR_DESCRIPTION_FORMATTED}\\n- **PR Author**: $${PR_AUTHOR_NAME}"
          ESCAPED_DETAILS=$(printf '%s' "$$DETAILS" | jq -R | jq -s -r 'join("\\n")')

          GIT_INFO_SECTION=",{
            \"color\": \"#439FE0\",
            \"title\": \"üìå Git Info\",
            \"blocks\": [
              {
                \"type\": \"section\",
                \"text\": {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*PR Details*\n$${ESCAPED_DETAILS}\"
                }
              }
            ]
          }"

        else
            GIT_INFO_SECTION=""
            DETAILS=""
        fi
          
          echo "$$DETAILS"
          echo "Deployment Details"
          echo "Commit SHA: $$COMMIT_SHA"
          echo "PR Title: $$PR_TITLE"
          echo "PR Number: #$$PR_NUMBER"
          echo "PR Description: $$PR_DESCRIPTION"
          echo "PR Author: $$PR_AUTHOR_NAME"

          echo '{
            "attachments": [
              {
                "color": "#36a64f",
                "title": "‚úÖ Test",
                "text": "Checking payload"
              }'"$${GIT_INFO_SECTION}"'
            ]
          }' | jq .

          TIMESTAMP=$(date +%s)
            curl -X POST -H 'Content-type: application/json' \
                --data '{
                  "attachments": [
                    {
                      "color": "#36a64f",
                      "title": "‚úÖ Deployment Success",
                      "text": "*Environment:* staging\n*Service:* demo-service",
                      "mrkdwn_in": ["text", "title"]
                    },
                    {
                      "color": "#439FE0",
                      "title": "üìå Git Info",
                      "blocks": [
                        {
                          "type": "section",
                          "text": {
                            "type": "mrkdwn",
                            "text": "*PR Details*\n- **PR Title**: Demo\n- **PR Author**: Divya"
                          }
                        }
                      ]
                    }
                  ]
                }' "$$SLACK_WEBHOOK_URL"
